PROJECT(cppgit2)
CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Add libgit2
OPTION(LIBGIT2_USE_VENDORED "Use the vendored libgit2, instead of finding the package externally" OFF)
if(LIBGIT2_USE_VENDORED)
  ADD_SUBDIRECTORY(ext/libgit2 ${CMAKE_BINARY_DIR}/lib)
  set(LIBGIT2_INCLUDEDIR ext/libgit2/include)
else()
  find_package(PkgConfig)
  if(PkgConfig_FOUND)
    PKG_CHECK_MODULES(LIBGIT2 libgit2>=1.4.0)
  endif()
endif()

INCLUDE(CMakePackageConfigHelpers)

# Sources for cppgit2
FILE(GLOB CPPGIT2_SOURCES "src/*.cpp")

# Version information
SET(CPPGIT2_VERSION_MAJOR 0)
SET(CPPGIT2_VERSION_MINOR 1)
SET(CPPGIT2_VERSION_REV 0)
SET(CPPGIT2_VERSION_STRING "${CPPGIT2_VERSION_MAJOR}.${CPPGIT2_VERSION_MINOR}.${CPPGIT2_VERSION_REV}")

# Build option for shared vs. static lib (Same option as for libgit2)
OPTION(BUILD_SHARED_LIBS "Build Shared Library (OFF for Static)" ON)

# Build object library
ADD_LIBRARY(CPPGIT2_OBJECT_LIBRARY OBJECT ${CPPGIT2_SOURCES})
INCLUDE_DIRECTORIES("include" "${LIBGIT2_INCLUDEDIR}" "test")
SET_PROPERTY(TARGET CPPGIT2_OBJECT_LIBRARY PROPERTY CXX_STANDARD 11)

# Shared libraries need PIC
SET_PROPERTY(TARGET CPPGIT2_OBJECT_LIBRARY PROPERTY POSITION_INDEPENDENT_CODE 1)

# Build shared/static library
if (BUILD_SHARED_LIBS)
  ADD_LIBRARY(cppgit2 SHARED $<TARGET_OBJECTS:CPPGIT2_OBJECT_LIBRARY>)
  SET_TARGET_PROPERTIES(cppgit2 PROPERTIES
    VERSION ${CPPGIT2_VERSION_STRING}
    SOVERSION ${CPPGIT2_VERSION_MINOR}
    WINDOWS_EXPORT_ALL_SYMBOLS ON)
else ()
  ADD_LIBRARY(cppgit2 STATIC $<TARGET_OBJECTS:CPPGIT2_OBJECT_LIBRARY>)
endif ()
TARGET_INCLUDE_DIRECTORIES(cppgit2
  PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/ext/libgit2/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/include")
SET_TARGET_PROPERTIES(cppgit2 PROPERTIES CXX_STANDARD 11)
TARGET_LINK_LIBRARIES(cppgit2 ${LIBGIT2_LINK_LIBRARIES})

# Copy include directories to build/include
FILE(COPY "include" DESTINATION "${CMAKE_BINARY_DIR}/.")
FILE(COPY "${LIBGIT2_INCLUDEDIR}/git2" DESTINATION "${CMAKE_BINARY_DIR}/include")
FILE(COPY "${LIBGIT2_INCLUDEDIR}/git2.h" DESTINATION "${CMAKE_BINARY_DIR}/include")

# Build samples
OPTION(LIBGIT2_BUILD_SAMPLES "Build samples" ON)
if(LIBGIT2_BUILD_SAMPLES)
  FILE(GLOB SAMPLES "samples/*.cpp")
  FOREACH(SAMPLE ${SAMPLES})
    GET_FILENAME_COMPONENT(SAMPLE_EXE ${SAMPLE} NAME_WE)
    ADD_EXECUTABLE(${SAMPLE_EXE} ${SAMPLE})
    SET_TARGET_PROPERTIES(${SAMPLE_EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/samples")
    TARGET_LINK_LIBRARIES(${SAMPLE_EXE} cppgit2)
    SET_PROPERTY(TARGET ${SAMPLE_EXE} PROPERTY CXX_STANDARD 11)
  ENDFOREACH()
endif()

# Build tests
OPTION(LIBGIT2_BUILD_TESTS "Build tests" ON)
if(LIBGIT2_BUILD_TESTS)
  FILE(GLOB TESTS "test/*.cpp")
  SET_SOURCE_FILES_PROPERTIES(test/main.cpp
    PROPERTIES
    COMPILE_DEFINITIONS DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN)
  ADD_EXECUTABLE(cppgit2_test ${TESTS})
  SET_TARGET_PROPERTIES(cppgit2_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/test")
  TARGET_LINK_LIBRARIES(cppgit2_test cppgit2)
  SET_PROPERTY(TARGET cppgit2_test PROPERTY CXX_STANDARD 11)
endif() 

install(TARGETS cppgit2 DESTINATION lib)
file(GLOB HEADER_FILES "include/cppgit2/*")
install(FILES ${HEADER_FILES} DESTINATION "include/cppgit2")